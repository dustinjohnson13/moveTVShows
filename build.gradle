
apply plugin: 'java'
apply plugin: 'groovy'

ext {
    tvShowDirectory = new File(project.property('tvShowDirectory'))
    completedDownloadsDirectory = new File(project.property('completedDownloadsDirectory'))

    if (project.hasProperty('completedDownloadsFileExclusions')) {
        completedDownloadsFileExclusions = project.property('completedDownloadsFileExclusions').toString().tokenize(',')

        logger.lifecycle "Using explicit completed downloads file exclusions: ${completedDownloadsFileExclusions}"
    } else {
        completedDownloadsFileExclusions = ['**/*.ass', '**/*.css', '**/*.divx', '**/*.DS_Store', '**/*.html', '**/*.jpg',
                                            '**/*.js', '**/*.nfo', '**/*.sfv', '**/*.srr', '**/*.srt', '**/*.txt', '**/*sample.*']

        logger.lifecycle "Using default completed downloads file exclusions: ${completedDownloadsFileExclusions}, override with -PcompletedDownloadsFileExclusions='<pattern1>, <pattern2>'"
    }
}

task moveFinishedDownloads() {

    inputs.dir completedDownloadsDirectory
    outputs.upToDateWhen { false }

    doFirst {
        completedDownloadsDirectory.eachFile() { file ->

            def fileName = file.name
            logger.lifecycle "Working on: ${fileName}"

            def showFinder = (fileName =~ /^(?i)(.*)S\d{1,2}E\d{1,2}.*/)

            if (!showFinder.matches()) {
                return;
            }

            String show = showFinder.group(1).replaceAll(/\./, ' ').trim()
            logger.info "Determined show: $show"

            File showDir = new File(tvShowDirectory, show)
            showDir.mkdirs()

            if (file.isFile()) {
                logger.lifecycle "Moving ${fileName} to ${showDir}"

                file.renameTo(new File(showDir, file.getName()));
            } else {
                logger.lifecycle "Moving contents of ${fileName} to ${showDir}"

                ant.move(todir: showDir, includeEmptyDirs: false) {
                    fileset(dir: file, excludes: completedDownloadsFileExclusions.join(', ')) {
                        include(name: '**/**')
                    }
                    flattenmapper()
                }

                ant.delete(dir: file)
            }
        }
    }
}

task run(dependsOn: [moveFinishedDownloads])
